-- MySQL Script generated by MySQL Workbench
-- Thu Jan 18 00:07:16 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema db
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `countries`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `countries` ;

CREATE TABLE IF NOT EXISTS `countries` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(8) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `image` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `athletes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `athletes` ;

CREATE TABLE IF NOT EXISTS `athletes` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(128) NOT NULL,
  `passw` VARCHAR(64) NOT NULL,
  `gender` ENUM('MALE', 'FEMALE') NOT NULL,
  `firstname` VARCHAR(64) NOT NULL,
  `surname` VARCHAR(64) NOT NULL,
  `country` INT(11) NOT NULL,
  `height` INT(4) NOT NULL,
  `weight` INT(4) NOT NULL,
  `strength` INT(4) NOT NULL,
  `speed` INT(4) NOT NULL,
  `endurance` INT(4) NOT NULL,
  `flexibility` INT(4) NOT NULL,
  `technique` INT(4) NOT NULL,
  `experience` INT(4) NOT NULL,
  `registerTime` DATETIME NOT NULL,
  `lastLoginTime` DATETIME NULL,
  `loginNumber` INT(11) NOT NULL,
  `competitionNumber` INT(11) NOT NULL,
  `lastTrainingTime` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  INDEX `athletesCountry_idx` (`country` ASC),
  CONSTRAINT `athletesCountry`
    FOREIGN KEY (`country`)
    REFERENCES `countries` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `disciplines`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `disciplines` ;

CREATE TABLE IF NOT EXISTS `disciplines` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(32) NOT NULL,
  `dimension` VARCHAR(16) NOT NULL,
  `type` ENUM('LOWER_THE_BETTER', 'HIGHER_THE_BETTER') NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `results`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `results` ;

CREATE TABLE IF NOT EXISTS `results` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `athlete` INT(11) NOT NULL,
  `discipline` INT(4) NOT NULL,
  `result` INT(11) NULL,
  `time` DATETIME NOT NULL,
  `wind` FLOAT(6,3) NOT NULL,
  `angle` INT(4) NULL,
  PRIMARY KEY (`id`),
  INDEX `resultsAthlete_idx` (`athlete` ASC),
  INDEX `resultsDiscipline_idx` (`discipline` ASC),
  CONSTRAINT `resultsAthlete`
    FOREIGN KEY (`athlete`)
    REFERENCES `athletes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `resultsDiscipline`
    FOREIGN KEY (`discipline`)
    REFERENCES `disciplines` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Placeholder table for view `loadAthletes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `loadAthletes` (`athleteId` INT, `athleteEmail` INT, `athletePassw` INT, `athleteGender` INT, `athleteFirstname` INT, `athleteSurname` INT, `athleteCountry` INT, `countryCode` INT, `countryName` INT, `countryImage` INT, `athleteHeight` INT, `athleteWeight` INT, `athleteStrength` INT, `athleteSpeed` INT, `athleteEndurance` INT, `athleteFlexibility` INT, `athleteTechnique` INT, `athleteExperience` INT, `athleteRegisterTime` INT, `athleteLastLoginTime` INT, `athleteLoginNumber` INT, `athleteCompetitionNumber` INT, `athleteLastTrainingTime` INT);

-- -----------------------------------------------------
-- Placeholder table for view `loadTopResults`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `loadTopResults` (`athleteId` INT, `athleteFirstname` INT, `athleteSurname` INT, `athleteGender` INT, `athleteCountry` INT, `countryCode` INT, `countryName` INT, `countryImage` INT, `disciplineId` INT, `disciplineName` INT, `disciplineDimension` INT, `disciplineType` INT, `resultValue` INT, `resultWind` INT, `resultTime` INT);

-- -----------------------------------------------------
-- Placeholder table for view `loadPBResults`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `loadPBResults` (`athlete` INT, `discipline` INT, `resultId` INT);

-- -----------------------------------------------------
-- function createAthlete
-- -----------------------------------------------------
DROP function IF EXISTS `createAthlete`;

DELIMITER $$
CREATE FUNCTION `createAthlete` (uEmail VARCHAR(128), uPassw VARCHAR(64),
                uGender ENUM('MALE', 'FEMALE'), uFirstname VARCHAR(64), uSurname VARCHAR(64),
                uCountry INT, uHeight INT, uWeight INT,
                uStrength INT, uSpeed INT, uEndurance INT, uFlexibility INT, uTechnique INT)
                RETURNS VARCHAR(255) LANGUAGE SQL MODIFIES SQL DATA
BEGIN
    DECLARE ifExists INT;
    
    IF(SELECT uEmail REGEXP('[A-Za-z0-9_.]*@[A-Za-z0-9_.]*') = 0) THEN
        RETURN 'Invalid email address!';
    END IF;
    IF(LOCATE(uPassw, '\'\"') != 0) THEN
        RETURN 'Password must not contain \' and \"!';
    END IF;
    IF(LENGTH(uPassw) < 6) THEN
        RETURN 'Password must be at least 6 characters long!';
    END IF;
    IF(LOCATE(uFirstname, '\'\"') != 0) THEN
        RETURN 'Firstname must not contain \' and \"!';
    END IF;
    IF(LOCATE(uSurname, '\'\"') != 0) THEN
        RETURN 'Surname must not contain \' and \"!';
    END IF;
    IF(uHeight < 140 || uHeight > 220) THEN
        RETURN 'Height must be between 140 and 220 cm!';
    END IF;
    IF(uWeight < 40 || uWeight > 140) THEN
        RETURN 'Weight must be between 40 and 140 kg!';
    END IF;
    IF(uStrength < 0 || uStrength > 100 || uSpeed < 0 || uSpeed > 100 || uEndurance < 0 || uEndurance > 100 || uFlexibility < 0 || uFlexibility > 100 || uTechnique < 0 || uTechnique > 100) THEN
        RETURN 'Strength, speed, endurance, flexibility and technique must be between 0 and 100!';
    END IF;

    SET uEmail := LOWER(uEmail);
    SELECT COUNT(*) INTO ifExists FROM athletes WHERE email = uEmail;

    IF(ifExists IS NOT NULL && ifExists >= 1) THEN
        RETURN 'Email address already exists! Please, use another one.';
    ELSE
        INSERT INTO athletes(email, passw, gender, firstname, surname, country, height, weight, strength, speed, endurance, flexibility, technique, experience, registerTime, lastLoginTime, loginNumber, competitionNumber, lastTrainingTime)
               VALUES(uEmail, uPassw, uGender, uFirstname, uSurname, uCountry, uHeight, uWeight, uStrength, uSpeed, uEndurance, uFlexibility, uTechnique, 0, NOW(), NULL, 0, 0, NULL);
    END IF;
    
    RETURN '';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function deleteAthlete
-- -----------------------------------------------------
DROP function IF EXISTS `deleteAthlete`;

DELIMITER $$
CREATE FUNCTION `deleteAthlete` (uId INT) 
                RETURNS VARCHAR(255) LANGUAGE SQL MODIFIES SQL DATA
BEGIN
    DECLARE ifExists INT;
    SELECT COUNT(*) INTO ifExists FROM athletes WHERE id= uId;
    
    IF(ifExists IS NULL || ifExists > 0) THEN
        RETURN 'User does not exist!';
    ELSE
        DELETE FROM athletes WHERE id = uId;
    END IF;
    
    RETURN '';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function login
-- -----------------------------------------------------
DROP function IF EXISTS `login`;

DELIMITER $$
CREATE FUNCTION `login` (uId INT)
                RETURNS INT LANGUAGE SQL MODIFIES SQL DATA
BEGIN
    SELECT id INTO uId FROM athletes WHERE id = uId;
    
    IF(uId IS NOT NULL && uId > 0) THEN
        UPDATE athletes SET lastLoginTime= NOW(), loginNumber= loginNumber + 1 WHERE id = uId;
        RETURN uId;
    ELSE
        RETURN -1;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure compete
-- -----------------------------------------------------
DROP procedure IF EXISTS `compete`;

DELIMITER $$
CREATE PROCEDURE `compete`(uId INT) LANGUAGE SQL MODIFIES SQL DATA
BEGIN
    UPDATE athletes SET competitionNumber= competitionNumber+1 WHERE id = uId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function train
-- -----------------------------------------------------
DROP function IF EXISTS `train`;

DELIMITER $$
CREATE FUNCTION `train` (uId INT, uSkill VARCHAR(16)) RETURNS VARCHAR(255)
                                        LANGUAGE SQL MODIFIES SQL DATA
BEGIN
    DECLARE uLastTrainingTime DATETIME;
    DECLARE ifExists INT;
    DECLARE uValue INT;
    
    SELECT COUNT(*) INTO ifExists FROM athletes WHERE id = uId;
    IF(ifExists IS NULL || ifExists < 1) THEN
        RETURN 'Athlete does not exists!';
    END IF;
    
    SELECT lastTrainingTime INTO uLastTrainingTime FROM athletes WHERE id = uId LIMIT 1;
    IF(uLastTrainingTime IS NOT NULL && TIMEDIFF(NOW(), ulastTrainingTime) < 3600) THEN
        RETURN 'You must not overtrain! Please wait 1 hour between training.';
    END IF;
    
    CASE uSkill
        WHEN 'strength' THEN
            SELECT strength INTO uValue FROM athletes WHERE id = uId;
        WHEN 'speed' THEN
            SELECT speed INTO uValue FROM athletes WHERE id = uId;
        WHEN 'endurance' THEN
            SELECT endurance INTO uValue FROM athletes WHERE id = uId;
        WHEN 'flexibility' THEN
            SELECT flexibility INTO uValue FROM athletes WHERE id = uId;
        WHEN 'technique' THEN
            SELECT technique INTO uValue FROM athletes WHERE id = uId;
    END CASE;
    IF(uValue >= 100) THEN
        RETURN 'Training reached maximum value!';
    END IF;
    
    CASE uSkill
        WHEN 'strength' THEN
            UPDATE athletes SET strength= strength+1, lastTrainingTime= NOW() WHERE id = uId;
        WHEN 'speed' THEN
            UPDATE athletes SET speed= speed+1, lastTrainingTime= NOW() WHERE id = uId;
        WHEN 'endurance' THEN
            UPDATE athletes SET endurance= endurance+1, lastTrainingTime= NOW() WHERE id = uId;
        WHEN 'flexibility' THEN
            UPDATE athletes SET flexibility= flexibility+1, lastTrainingTime= NOW() WHERE id = uId;
        WHEN 'technique' THEN
            UPDATE athletes SET technique= technique+1, lastTrainingTime= NOW() WHERE id = uId;
        ELSE 
            RETURN 'Invalid skill!';
    END CASE;
    RETURN '';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registerResult
-- -----------------------------------------------------
DROP procedure IF EXISTS `registerResult`;

DELIMITER $$
CREATE PROCEDURE `registerResult` (uAthlete INT, uDiscipline INT, uResult INT, uWind FLOAT, uAngle INT)
BEGIN
    INSERT INTO results(athlete,discipline, result, time, wind, angle) VALUES (uAthlete, uDiscipline, uResult, NOW(), uWind, uAngle);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `loadAthletes`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `loadAthletes` ;
DROP TABLE IF EXISTS `loadAthletes`;
CREATE  OR REPLACE VIEW `loadAthletes` AS
SELECT
    athletes.id AS athleteId, athletes.email AS athleteEmail,
    athletes.passw AS athletePassw, athletes.gender AS athleteGender,
    athletes.firstname AS athleteFirstname, athletes.surname AS athleteSurname,
    athletes.country AS athleteCountry, countries.code AS countryCode,
    countries.name AS countryName, countries.image AS countryImage,
    athletes.height AS athleteHeight, athletes.weight AS athleteWeight,
    athletes.strength AS athleteStrength, athletes.speed AS athleteSpeed,
    athletes.endurance AS athleteEndurance, athletes.flexibility AS athleteFlexibility,
    athletes.technique AS athleteTechnique, athletes.experience AS athleteExperience,
    athletes.registerTime AS athleteRegisterTime,
    athletes.lastLoginTime AS athleteLastLoginTime,
    athletes.loginNumber AS athleteLoginNumber,
    athletes.competitionNumber AS athleteCompetitionNumber,
    athletes.lastTrainingTime AS athleteLastTrainingTime
FROM
    athletes, countries
WHERE
    athletes.country = countries.id;

-- -----------------------------------------------------
-- View `loadTopResults`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `loadTopResults` ;
DROP TABLE IF EXISTS `loadTopResults`;
CREATE  OR REPLACE VIEW `loadTopResults` AS
SELECT
    athleteId, athleteFirstname, athleteSurname, athleteGender,
    athleteCountry, countryCode, countryName, countryImage,
    disciplines.id AS disciplineId, disciplines.name AS disciplineName,
    disciplines.dimension AS disciplineDimension, disciplines.type AS disciplineType,
    r.result AS resultValue, r.wind AS resultWind, r.time AS resultTime
FROM
    loadAthletes, results AS r, disciplines
WHERE  
    athleteId = r.athlete AND r.discipline = disciplines.id AND r.id IN (
    SELECT
        pbr.resultId
    FROM
        loadPBResults pbr
    WHERE
        pbr.athlete = r.athlete AND pbr.discipline = r.discipline
    )
ORDER BY
    disciplines.id, r.result DESC;

-- -----------------------------------------------------
-- View `loadPBResults`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `loadPBResults` ;
DROP TABLE IF EXISTS `loadPBResults`;
CREATE  OR REPLACE VIEW `loadPBResults` AS
SELECT
    r.athlete AS athlete, r.discipline AS discipline, r.id AS resultId
FROM
    results r, disciplines d
WHERE
    r.discipline = d.id
GROUP BY
    r.id, r.athlete, r.discipline, d.type, r.result
HAVING
    r.result = CASE d.type
        WHEN 'HIGHER_THE_BETTER' THEN (SELECT MAX(result) FROM results WHERE athlete= r.athlete AND discipline = r.discipline)
        WHEN 'LOWER_THE_BETTER' THEN  (SELECT MIN(result) FROM results WHERE athlete= r.athlete AND discipline = r.discipline)
        ELSE -1
    END;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `countries`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (1, 'HUN', 'Hungary', 'Hungary.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (2, 'UK', 'United Kingdom', 'United_kingdom.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (3, 'USA', 'United States of America', 'United_States_of_America.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (4, 'FR', 'France', 'France.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (5, 'FIN', 'Finland', 'Finland.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (6, 'AUS', 'Australia', 'Australia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (7, 'CAN', 'Canada', 'Canada.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (8, 'CRO', 'Croatia', 'Croatia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (9, 'DEN', 'Denmark', 'Denmark.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (10, 'COS', 'Costa Rica', 'Costa_Rica.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (11, 'ETH', 'Ethiopia', 'Ethiopia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (12, 'CUB', 'Cuba', 'Cuba.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (13, 'BRA', 'Brazil', 'Brazil.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (14, 'ARG', 'Argentina', 'Argentina.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (15, 'BAH', 'Bahrain', 'Bahrain.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (16, 'CAM', 'Cameroon', 'Cameroon.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (17, 'CZE', 'Czech Republic', 'Czech_Republic.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (18, 'CN', 'China', 'China.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (19, 'EST', 'Estonia', 'Estonia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (20, 'EGY', 'Egypt', 'Egypt.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (21, 'AUT', 'Austria', 'Austria.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (22, 'BEL', 'Belgium', 'Belgium.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (23, 'GER', 'Germany', 'Germany.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (24, 'GHA', 'Ghana', 'Ghana.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (25, 'GRE', 'Greece', 'Greece.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (26, 'ICE', 'Iceland', 'Iceland.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (27, 'IND', 'India', 'India.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (28, 'IRQ', 'Iraq', 'Iraq.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (29, 'IRL', 'Ireland', 'Ireland.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (30, 'ISR', 'Israel', 'Israel.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (31, 'ITA', 'Italy', 'Italy.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (32, 'JAM', 'Jamaica', 'Jamaica.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (33, 'JAP', 'Japan', 'Japan.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (34, 'KAZ', 'Kazakhstan', 'Kazakhstan.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (35, 'KEN', 'Kenya', 'Kenya.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (36, 'LAT', 'Latvia', 'Latvia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (37, 'LIT', 'Lithuania', 'Lithuania.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (38, 'MAL', 'Malaysia', 'Malaysia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (39, 'MOR', 'Morocco', 'Morocco.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (40, 'NED', 'Netherlands', 'Netherlands.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (41, 'BEL', 'Belgium', 'Belgium.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (42, 'NZL', 'New Zealand', 'New_Zealand.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (43, 'NGA', 'Nigeria', 'Nigeria.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (44, 'NOR', 'Norway', 'Norway.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (45, 'OMN', 'Oman', 'Oman.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (46, 'PAN', 'Panama', 'Panama.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (47, 'PAR', 'Paraguay', 'Paraguay.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (48, 'PER', 'Peru', 'Peru.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (49, 'POL', 'Poland', 'Poland.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (50, 'POR', 'Portugal', 'Portugal.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (51, 'QUA', 'Quatar', 'Quatar.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (53, 'ROM', 'Romania', 'Romania.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (55, 'RUS', 'Russia', 'Russian_Federation.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (56, 'KNA', 'Saint Kitts and Nevis', 'Saint_Kitts_and_Nevis.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (57, 'SAU', 'Saudi Arabia', 'Saudi_Arabia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (58, 'SEN', 'Senegal', 'Senegal.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (59, 'SER', 'Serbia', 'Serbia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (60, 'SGP', 'Singapore', 'Singapore.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (61, 'SVK', 'Slovakia', 'Slovakia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (62, 'SVN', 'Slovenia', 'Slovenia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (63, 'ZAF', 'South Africa', 'South_Africa.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (64, 'KOR', 'South Korea', 'South_Korea.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (65, 'ESP', 'Spain', 'Spain.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (66, 'SDN', 'Sudan', 'Sudan.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (67, 'SWE', 'Sweden', 'Sweden.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (68, 'CHE', 'Switzerland', 'Switzerland.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (69, 'TIB', 'Tibet', 'Tibet.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (70, 'THA', 'Thailand', 'Thailand.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (71, 'TOG', 'Togo', 'Togo.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (72, 'TRI', 'Trinidad and Tobago', 'Trinidad_and_Tobago.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (73, 'TUN', 'Tunisia', 'Tunisia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (74, 'TUR', 'Turkey', 'Turkey.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (75, 'UKR', 'Ukraine', 'Ukraine.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (76, 'URY', 'Uruguay', 'Uruguay.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (77, 'YEM', 'Yemen', 'Yemen.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (78, 'ZAM', 'Zambia', 'Zambia.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (79, 'ZIM', 'Zimbabwe', 'Zimbabwe.png');
INSERT INTO `countries` (`id`, `code`, `name`, `image`) VALUES (80, 'UZB', 'Uzbekistan', 'Uzbekistan.png');

COMMIT;


-- -----------------------------------------------------
-- Data for table `athletes`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `athletes` (`id`, `email`, `passw`, `gender`, `firstname`, `surname`, `country`, `height`, `weight`, `strength`, `speed`, `endurance`, `flexibility`, `technique`, `experience`, `registerTime`, `lastLoginTime`, `loginNumber`, `competitionNumber`, `lastTrainingTime`) VALUES (1, 'kocsismate', 'password', 'MALE', 'Mate', 'Kocsis', 1, 175, 85, 50, 50, 50, 50, 50, 0, '2012-07-11 09:27:02', NULL, 0, 0, NULL);
INSERT INTO `athletes` (`id`, `email`, `passw`, `gender`, `firstname`, `surname`, `country`, `height`, `weight`, `strength`, `speed`, `endurance`, `flexibility`, `technique`, `experience`, `registerTime`, `lastLoginTime`, `loginNumber`, `competitionNumber`, `lastTrainingTime`) VALUES (2, 'athlete', 'password', 'MALE', 'John', 'Doe', 2, 185, 82, 70, 70, 70, 70, 70, 0, '2012-07-24 02:17:02', NULL, 0, 0, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `disciplines`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `disciplines` (`id`, `name`, `dimension`, `type`) VALUES (1, 'javelin throw', 'length', 'HIGHER_THE_BETTER');
INSERT INTO `disciplines` (`id`, `name`, `dimension`, `type`) VALUES (2, '100 m running', 'time', 'LOWER_THE_BETTER');
INSERT INTO `disciplines` (`id`, `name`, `dimension`, `type`) VALUES (3, '400 m running', 'time', 'LOWER_THE_BETTER');
INSERT INTO `disciplines` (`id`, `name`, `dimension`, `type`) VALUES (4, '800 m running', 'time', 'LOWER_THE_BETTER');
INSERT INTO `disciplines` (`id`, `name`, `dimension`, `type`) VALUES (5, '5000 m running', 'time', 'LOWER_THE_BETTER');

COMMIT;


-- -----------------------------------------------------
-- Data for table `results`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `results` (`id`, `athlete`, `discipline`, `result`, `time`, `wind`, `angle`) VALUES (1, 1, 1, 5860, '2009-06-06 16:00:00', -2, 46);
INSERT INTO `results` (`id`, `athlete`, `discipline`, `result`, `time`, `wind`, `angle`) VALUES (2, 1, 1, 6010, '2011-06-14 18:00:00', 0, 43);
INSERT INTO `results` (`id`, `athlete`, `discipline`, `result`, `time`, `wind`, `angle`) VALUES (3, 1, 1, 6128, '2011-09-17', -0.4, 44);
INSERT INTO `results` (`id`, `athlete`, `discipline`, `result`, `time`, `wind`, `angle`) VALUES (4, 2, 1, 4100, '2008-09-11', -1, NULL);
INSERT INTO `results` (`id`, `athlete`, `discipline`, `result`, `time`, `wind`, `angle`) VALUES (5, 2, 1, 3640, '2008-06-25', 2, NULL);

COMMIT;

